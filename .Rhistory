getwd()
# the following may require morris package
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
# publish your visualization as a standalone html page using the publish
# method. Here is an example. Currently, you can publish your chart as a
# gist or to rpubs.
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris,
color = 'Species', type = 'point')
r1$publish('Scatterplot', host = 'gist')
r1$publish('Scatterplot', host = 'rpubs')
# publish your visualization as a standalone html page using the publish
# method. Here is an example. Currently, you can publish your chart as a
# gist or to rpubs.
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$publish('Scatterplot', host = 'gist')
r1$publish('Scatterplot', host = 'rpubs')
require(rCharts)
# publish your visualization as a standalone html page using the publish
# method. Here is an example. Currently, you can publish your chart as a
# gist or to rpubs.
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$publish('Scatterplot', host = 'gist')
r1$publish('Scatterplot', host = 'gist')
r1$publish('Scatterplot', host = 'rpubs')
getwd()
library(RCurl)
library(plyr)
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',data = subset(haireye, Sex == 'Male'))
n1
# uses Javascript polycharts
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1
# publish your visualization as a standalone html page using the publish
# method. Here is an example. Currently, you can publish your chart as a
# gist or to rpubs.
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
r1$publish('Scatterplot', host = 'gist')
require(rCharts)
# publish your visualization as a standalone html page using the publish
# method. Here is an example. Currently, you can publish your chart as a
# gist or to rpubs.
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
r1$publish('Scatterplot', host = 'gist')
r1$publish('Scatterplot', host = 'rpubs')
#Question 2
data(airquality)
new <- dTable(airquality, sPaginationType = "full_numbers")
head(new)
class(new)
str(new)
View(airquality)
View(airquality)
print(new)
#Question 2
data(airquality)
new <- dTable(airquality, sPaginationType = "full_numbers")
print(new)
#Question 2
data(airquality)
new <- dTable(airquality, sPaginationType = "full_numbers")
#Question 2
require(rCharts)
data(airquality)
new <- dTable(airquality, sPaginationType = "full_numbers")
? R version
sessionInfo(0)
sessionInfo()
packinfo <- installed.packages (fields = c ("Package", "Version"))
packinfo[,c("Package", "Version")]
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M, "chart")
print(M,"chart")
plot(M)
#Geo chart
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
#print(G,"chart")  -- for slidify
plot(G)
# specifying a region (150 = europe)
G2 <- gvisGeoChart(Exports, locationvar="Country",colorvar="Profit",options=list(width=600, height=400,region="150"))
#print(G2,"chart")
plot(G2)
# Merging several plots together
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
print(M)
getwd()
install.packages("viridis")
library("devtools")
devtools::install_github("ropensci/plotly")
help(pca)
preprocess
help(preProcess)
help(predict)
help(confusionMatrix)
help(prcomp)
data(mtcars)
cars <- mtcars
levels <- cut(cars$mpg, 10)
cars$mpg <- levels
set.seed(32343)
help(sample)
help(tapply)
data(mtcars)
cars <- mtcars
levels <- cut(cars$mpg, 10)
cars$mpg <- levels
set.seed(32343)
training.rows <- tapply(1:nrow(cars), cars$mpg , sample , size = 24)
training.rows <- tapply(1:nrow(cars), cars$mpg , sample , prob = 0.8)
training.rows <- tapply(1:nrow(cars), cars$mpg , sample , size =24, replace=TRUE)
inTrain <- unlist( training.rows )
inTrain
train.set <- cars[InTrain,]
InTrain <- unlist( training.rows )
train.set <- cars[InTrain,]
valid.set <- cars[-InTrain,]
length(InTrain)
levels
summary(levels)
training.rows <- tapply(1:nrow(cars), cars$mpg , sample , size =4, replace=TRUE)
InTrain <- unlist( training.rows )
train.set <- cars[InTrain,]
valid.set <- cars[-InTrain,]
data(mtcars)
cars <- mtcars
levels <- cut(cars$mpg, 10)
cars$mpg <- levels
set.seed(32343)
training.rows <- tapply(1:nrow(cars), cars$mpg , sample , size =4, replace=TRUE)
InTrain <- unlist( training.rows )
train.set <- cars[InTrain,]
valid.set <- cars[-InTrain,]
dim(train.set); dim(valid.set)
pcal <- prcomp(train.set, scale=TRUE, center=TRUE, tol = 0.95)
pcal <- prcomp(train.set[,-1], scale=TRUE, center=TRUE, tol = 0.95)
head(pcal$x)
pcal <- prcomp(train.set[,-1], scale=TRUE, center=TRUE, tol = 0.05)
head(pcal$x)
preProc <- pcal$x
str(preProc)
trainPC <- predict(preProc,train.set[,-1])
preProc <- as.dataframe(pcal$x)
preProc <- asdataframe(pcal$x)
preProc <- as.data.frame(pcal$x)
trainPC <- predict(preProc,train.set[,-1])
help(predict)
trainPC <- preProc
modelFit <- train(train.set$mpg ~ .,method="knn",data=trainPC)
help(train)
knn(train.set[,-1], test.set[,-1], cl= train.set$mpg, k = 4,  prob = FALSE, use.all = TRUE)
help(knn)
help(FNN)
library(class)
knn(train.set[,-1], test.set[,-1], cl= train.set$mpg, k = 4,  prob = FALSE, use.all = TRUE)
knn(train.set[,-1], valid.set[,-1], cl= train.set$mpg, k = 4,  prob = FALSE, use.all = TRUE)
pred <- knn(train.set[,-1], valid.set[,-1], cl= train.set$mpg, k = 4,  prob = FALSE, use.all = TRUE)
obs <- valid.set$mpg
confusion.matrix(obs,pred,threshold=0.5)
library(SDMTools)
install.packages("SDMTools")
library(SDMTools)
confusion.matrix(obs,pred,threshold=0.5)
length(obs)
length(pred)
count <- sum(obs==pred)
count
obs
pred
library(slidify)
setwd("C:/Users/shankar/Desktop/DataProducts/SlidifyProject/Slidify/Pca_Deck")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'PCA and KNN for Machine Learning', 'index.html', host = 'rpubs')
publish(user = "shankar4", repo = "DataProducts")
install packages("markdown")
library(markdown)
title <- 'PCA and KNN for Machine Learning'
htmlFile <- 'index.html'
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
getwd()
browseURL("index.html")
title <- 'PCA and KNN for Machine Learning'
htmlFile <- "index.html"
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
getwd()
title <- 'PCA and KNN for Machine Learning'
htmlFile <- "C:/Users/shankar/Desktop/DataProducts/SlidifyProject/Slidify/Pca_Deck/index.html"
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
library(markdown)
title <- 'PCA and KNN for Machine Learning'
htmlFile <- "file:///C:/Users/shankar/Desktop/DataProducts/SlidifyProject/Slidify/Pca_Deck/index.html"
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
title <- 'PCA and KNN for Machine Learning'
htmlFile <- "C:/Users/shankar/Desktop/DataProducts/SlidifyProject/Slidify/Pca_Deck/index.html"
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
